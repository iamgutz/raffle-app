{"version":3,"sources":["utils/localstorage.js","App/context.js","App/helpers.js","config/index.js","components/app-wrapper/index.js","style/media-queries.js","components/layout/index.js","components/button/index.js","components/app-logo/styles.js","components/app-logo/index.js","components/typography/index.js","views/intro/index.js","components/text-area/index.js","views/set-participants/index.js","components/list/index.js","views/confirm-participants/index.js","components/svg/index.js","views/shuffle/index.js","views/shuffle/helpers.js","views/winner/styles.js","views/winner/index.js","views/index.js","App/ActiveContainer.js","serviceWorker.js","index.js","App/index.js","components/svg/shuffle-spinner.svg"],"names":["available","Storage","getFromStorage","key","JSON","parse","window","localStorage","getItem","setInStorage","value","setItem","stringify","AppContext","createContext","undefined","useAppContext","context","useContext","Error","AppContextProvider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","activeView","setActiveView","_useState3","_useState4","participants","setParticipants","_useState5","_useState6","selectedWinner","setSelectedWinner","contextValue","onChangeView","viewName","onTextareaChange","val","_map","_compact","split","_trim","parseTextAreaValue","onSelectedWinner","onClearState","callback","react_default","a","createElement","Provider","config","forcedWinner","theme","appLogoImgSrc","concat","process","bgColor","buttonColor","listItemBgColorEven","textColor","text","addParticipantsTitle","backButton","cancelButton","confirmButton","confirmTitle","congratulationsSuperTitle","congratulationsTitle","continueButton","enterButton","finishButton","pickingWinnerTitle","slogan","startOverButton","AppWrapper","styled","div","_templateObject","Config","SIZE","DEVICE","MOBILE_S","MOBILE_M","MOBILE_L","TABLET","LAPTOP","LAPTOP_L","DESKTOP","Main","main","layout_templateObject","Row","_templateObject2","Container","_templateObject3","Button","button","button_templateObject","propTypes","primary","PropTypes","bool","secondary","AppLogoImg","img","styles_templateObject","xlarge","_ref2","large","_ref3","medium","_ref4","small","_ref5","xsmall","AppLogo","props","assign","src","Title","h1","typography_templateObject","SuperTitle","typography_templateObject2","Headline","h2","typography_templateObject3","SubTitle","h4","_templateObject4","P","p","_templateObject5","textAlign","Intro","react","app_logo","components_button","onClick","TextArea","textarea","text_area_templateObject","SetParticipants","previousView","nextView","_useAppContext","text_area","onInput","target","defaultValue","join","disabled","_isEmpty","defaultProps","List","ul","list_templateObject","Item","li","list_templateObject2","ConfirmParticipants","Fragment","map","ImgSVG","svg_templateObject","width","padding","pickingWinnerDuration","Math","floor","random","Shuffle","winnerName","setWinnerName","debouncedOnSelectWinner","_debounce","shuffledParticipants","useMemo","_shuffle","randomTimeout","useRef","shuffleInterval","winnerTimeout","setSelected","useCallback","index","selected","useEffect","current","setTimeout","clearInterval","finalWinner","indexOf","setInterval","randomParticipant","length","clearTimeout","svg","shuffleSpinner","Podium","winner_styles_templateObject","Winner","handleStartOver","clear","react_confetti_min_default","innerWidth","height","innerHeight","VIEWS","intro","confirmParticipants","shuffle","winner","ActiveContainer","Comp","Boolean","location","hostname","match","ReactDOM","render","context_AppContextProvider","app_wrapper","App_ActiveContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.f93e1b65.chunk.js","sourcesContent":["const available = () => typeof(Storage) !== \"undefined\";\nexport const clearStorage = () => available && window.localStorage.clear();\nexport const getFromStorage = key => available && JSON.parse(window.localStorage.getItem(key));\nexport const getStorage = () => available && window.localStorage;\nexport const removeFromStorage = key => available && window.localStorage.removeItem(key);\nexport const setInStorage = (key, value) => available && window.localStorage.setItem(key, JSON.stringify(value));\n","import React, { createContext, useContext, useState } from 'react';\nimport { setInStorage, getFromStorage } from 'utils/localstorage';\nimport { parseTextAreaValue } from './helpers';\n\nexport const AppContext = createContext(undefined);\n\nexport const useAppContext = () => {\n    const context = useContext(AppContext);\n    if (!context) {\n        throw new Error('useAppContext must be used within a AppContextProvider');\n    }\n    return context;\n};\n\nexport const AppContextProvider = ({ children }) => {\n    const [activeView, setActiveView] = useState(getFromStorage('activeView') || 'intro');\n    const [participants, setParticipants] = useState(getFromStorage('participants') || null);\n    const [selectedWinner, setSelectedWinner] = useState(getFromStorage('selectedWinner') || null);\n\n    const changeActiveView = viewName => {\n        setActiveView(viewName);\n        setInStorage('activeView', viewName);\n    };\n    const textareaChange = value => {\n        const val = parseTextAreaValue(value) || null;\n        setParticipants(val);\n        setInStorage('participants', val);\n    };\n    const selectWinner = value => {\n        const val = value || null;\n        setSelectedWinner(val);\n        setInStorage('selectedWinner', val);\n    };\n    const clearState = callback => {\n        setActiveView('intro');\n        setParticipants(null);\n        setSelectedWinner(null);\n        callback();\n    };\n\n    const contextValue = {\n        activeView,\n        participants,\n        selectedWinner,\n        onChangeView: changeActiveView,\n        onTextareaChange: textareaChange,\n        onSelectedWinner: selectWinner,\n        onClearState: clearState,\n    };\n\n    return <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>;\n};\n","import _compact from 'lodash/compact';\nimport _trim from 'lodash/trim';\nimport _map from 'lodash/map';\n\nexport const parseTextAreaValue = value => {\n    return value && _map(_compact(value.split('\\n')), _trim);\n};\n","export default {\n  forcedWinner: 'John Doe',\n  theme: {\n    appLogoImgSrc: `${process.env.PUBLIC_URL}/images/raffle-logo.jpg`,\n    bgColor: '#F7F7F7',\n    buttonColor: '#FF070C',\n    listItemBgColorEven: '#E7EDED',\n    textColor: '#000834',\n  },\n  text: {\n    addParticipantsTitle: 'Add Participants',\n    backButton: 'Go Back',\n    cancelButton: 'Cancel',\n    confirmButton: 'Confirm & Go!',\n    confirmTitle: 'Confirm the participants',\n    congratulationsSuperTitle: 'Congratulations!',\n    congratulationsTitle: 'The winner is...',\n    continueButton: 'Continue',\n    enterButton: 'Enter now!',\n    finishButton: 'Finalize',\n    pickingWinnerTitle: 'Picking the winner',\n    slogan: 'Win prizes today, good luck.',\n    startOverButton: 'Start Over',\n  },\n};\n","import styled from 'styled-components';\nimport Config from 'config';\n\nconst AppWrapper = styled.div`\n  background-color: ${Config.theme.bgColor};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${Config.theme.textColor};\n  text-align: center;\n`;\n\nexport default AppWrapper;\n","export const SIZE = {\n  MOBILE_S: '320px',\n  MOBILE_M: '375px',\n  MOBILE_L: '425px',\n  TABLET: '768px',\n  LAPTOP: '1024px',\n  LAPTOP_L: '1140px',\n  DESKTOP: '2560px',\n};\n\nexport const DEVICE = {\n  MOBILE_S: `(min-width: ${SIZE.MOBILE_S})`,\n  MOBILE_M: `(min-width: ${SIZE.MOBILE_M})`,\n  MOBILE_L: `(min-width: ${SIZE.MOBILE_L})`,\n  TABLET: `(min-width: ${SIZE.TABLET})`,\n  LAPTOP: `(min-width: ${SIZE.LAPTOP})`,\n  LAPTOP_L: `(min-width: ${SIZE.LAPTOP_L})`,\n  DESKTOP: `(min-width: ${SIZE.DESKTOP})`,\n};\n","import styled from 'styled-components';\nimport { DEVICE } from 'style/media-queries';\n\nexport const Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 0 1rem;\n  box-sizing: border-box;\n  @media ${DEVICE.TABLET} {\n    padding: 0 5rem;\n  }\n`;\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n`;\nexport const Container = styled.main`\n  width: 100%;\n  max-width: 40rem;\n  padding: 0 1rem;\n  box-sizing: border-box;\n  @media ${DEVICE.TABLET} {\n    padding: 0 5rem;\n  }\n`;","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Config from 'config';\n\nconst Button = styled.button `\n  border: none;\n  font-family: 'PT Sans', sans-serif;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 1rem;\n  text-transform: uppercase;\n  cursor: pointer;\n  background: transparent;\n  color: ${Config.theme.buttonColor};\n  border: 3px solid ${Config.theme.buttonColor};\n`;\n\nButton.propTypes = {\n  primary: PropTypes.bool,\n  secondary: PropTypes.bool,\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const AppLogoImg = styled.img`\n  width: 20rem;\n  ${({ xlarge }) => xlarge && `\n    width: 40rem;\n  `}\n  ${({ large }) => large && `\n    width: 30rem;\n  `}\n  ${({ medium }) => medium && `\n    width: 20rem;\n  `}\n  ${({ small }) => small && `\n    width: 10rem;\n  `}\n  ${({ xsmall }) => xsmall && `\n    width: 5rem;\n  `}\n`;\n","import React from 'react';\nimport { AppLogoImg } from './styles';\nimport Config from 'config';\n\nconst AppLogo = props => (\n  <AppLogoImg src={Config.theme.appLogoImgSrc} {...props} />\n);\n\nexport default AppLogo;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-family: 'Teko', sans-serif;\n  font-size: 3.36rem;\n  font-weight: normal;\n  margin: 1rem 0;\n  display: block;\n  line-height: 3.36rem;\n`;\n\nexport const SuperTitle = styled(Title)`\n  font-size: 9rem;\n  font-weight: bold;\n  line-height: 9rem;\n`;\n\nexport const Headline = styled.h2`\n  font-family: 'Montserrat', sans-serif;\n`;\n\nexport const SubTitle = styled.h4`\n  font-family: 'Montserrat', sans-serif;\n  font-weight: normal;\n  font-size: 1.5rem;\n  margin: 1rem 0;\n`;\n\nexport const P = styled.p`\n  font-family: 'Catamaran', sans-serif;\n  font-size: 1.5rem;\n  ${({ textAlign }) => textAlign && `\n    text-align: ${textAlign};\n  `}\n`;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'components/button';\nimport AppLogo from 'components/app-logo';\nimport { SubTitle } from 'components/typography';\nimport Config from 'config';\nimport { useAppContext } from '../../App/context';\n\nconst Intro = props => {\n    const { onChangeView } = useAppContext();\n    return (\n        <Fragment>\n            <AppLogo />\n            <SubTitle>\n                <strong>{Config.text.slogan}</strong>\n            </SubTitle>\n            <Button onClick={() => onChangeView('setParticipants')}>\n                {Config.text.enterButton}\n            </Button>\n        </Fragment>\n    );\n};\n\nIntro.propTypes = {\n    onChangeView: PropTypes.func.isRequired,\n};\n\nexport default Intro;\n","import styled from 'styled-components';\n\nconst TextArea = styled.textarea`\n  border-radius: 0.5rem;\n  border: none;\n  box-sizing: border-box;\n  font-family: 'Catamaran', sans-serif;\n  font-size: 1.5rem;\n  height: 20rem;\n  outline: none;\n  padding: 1rem;\n  width: 100%;\n`;\n\nexport default TextArea;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEmpty from 'lodash/isEmpty';\nimport TextArea from 'components/text-area';\nimport Button from 'components/button';\nimport { Row, Container } from 'components/layout';\nimport { Title } from 'components/typography';\nimport Config from 'config';\nimport { useAppContext } from '../../App/context';\n\nconst SetParticipants = props => {\n    const { previousView, nextView } = props;\n    const { onChangeView, onTextareaChange, participants } = useAppContext();\n\n    return (\n        <Container>\n            <Title>{Config.text.addParticipantsTitle}</Title>\n\n            <TextArea\n                onInput={({ target: { value } }) => onTextareaChange(value)}\n                defaultValue={participants && participants.join('\\n')}\n            />\n            <Row>\n                <Button\n                    secondary\n                    onClick={() => onChangeView(previousView)}\n                >\n                    {Config.text.cancelButton}\n                </Button>\n                <Button\n                    primary\n                    onClick={() => onChangeView(nextView)}\n                    disabled={_isEmpty(participants)}\n                >\n                    {Config.text.continueButton}\n                </Button>\n            </Row>\n        </Container>\n    );\n};\n\nSetParticipants.propTypes = {\n    previousView: PropTypes.string,\n    nextView: PropTypes.string,\n    participants: PropTypes.string.isRequired,\n    onTextareaChange: PropTypes.func.isRequired,\n};\n\nSetParticipants.defaultProps = {\n    previousView: 'intro',\n    nextView: 'confirmParticipants',\n};\n\nexport default SetParticipants;\n","import styled from 'styled-components';\nimport Config from 'config';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: block;\n  width: 100%;\n  margin: 0;\n  padding: 1rem 0;\n  & > li {\n    border-bottom: 1px solid ${Config.theme.listItemBgColorEven};\n    &:last-child {\n      border-bottom: none;\n    }\n    &:nth-child(even) {\n      background: ${Config.theme.listItemBgColorEven};\n    }\n  }\n`;\n\nexport const Item = styled.li`\n  font-size: 1rem;\n  font-weight: bold;\n  display: block;\n  width: 100%;\n  text-align: left;\n  padding: 0.5rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'components/button';\nimport { List, Item } from 'components/list';\nimport { Row, Container } from 'components/layout';\nimport { Title } from 'components/typography';\nimport Config from 'config';\nimport { useAppContext } from '../../App/context';\n\nconst ConfirmParticipants = props => {\n    const { previousView, nextView } = props;\n    const { onChangeView, participants } = useAppContext();\n\n    return (\n        <Container>\n            {participants && (\n                <>\n                    <Title>{Config.text.confirmTitle}</Title>\n                </>\n            )}\n            <List>\n                {participants && participants.map(p => <Item key={JSON.stringify(p)}>{p}</Item>)}\n            </List>\n            <Row>\n                <Button\n                    secondary\n                    onClick={() => onChangeView(previousView)}\n                >\n                    {Config.text.backButton}\n                </Button>\n                <Button\n                    primary\n                    onClick={() => onChangeView(nextView)}\n                >\n                    {Config.text.confirmButton}\n                </Button>\n            </Row>\n        </Container>\n    );\n};\n\nConfirmParticipants.propTypes = {\n    previousView: PropTypes.string,\n    nextView: PropTypes.string,\n};\n\nConfirmParticipants.defaultProps = {\n    previousView: 'setParticipants',\n    nextView: 'shuffle',\n};\n\nexport default ConfirmParticipants;\n","import styled from 'styled-components';\n\nconst ImgSVG = styled.img`\n  ${({ width }) => width && `\n    width: ${width};\n  `}\n  ${({ padding }) => padding && `\n    padding: ${padding};\n  `}\n`;\n\nexport default ImgSVG;\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport _shuffle from 'lodash/shuffle';\nimport _debounce from 'lodash/debounce';\nimport _trim from 'lodash/trim';\nimport Config from 'config';\nimport { Row, Container } from 'components/layout';\nimport Button from 'components/button';\nimport { Title, P } from 'components/typography';\nimport ImgSVG from 'components/svg';\nimport shuffleSpinner from '../../components/svg/shuffle-spinner.svg';\nimport { useAppContext } from '../../App/context';\nimport { getRandomTimeout } from './helpers';\n\nconst forcedWinner = _trim(Config.forcedWinner) || null;\nconst pickingWinnerDuration = getRandomTimeout() * 1000;\n\nconst Shuffle = ({ nextView, previousView }) => {\n    const { participants, onSelectedWinner, onChangeView } = useAppContext();\n    const [winnerName, setWinnerName] = useState(null);\n    const debouncedOnSelectWinner = _debounce(onSelectedWinner, 100);\n    const shuffledParticipants = useMemo(() => _shuffle(participants), [participants]);\n    const randomTimeout = useRef(null);\n    const shuffleInterval = useRef(null);\n    const winnerTimeout = useRef(null);\n    const setSelected = useCallback(\n        index => {\n            const selected = shuffledParticipants[index];\n            setWinnerName(selected);\n        },\n        [shuffledParticipants],\n    );\n\n    useEffect(() => {\n        if (!randomTimeout.current) {\n            randomTimeout.current = setTimeout(() => {\n                clearInterval(shuffleInterval.current);\n                if (forcedWinner) {\n                    const finalWinner = shuffledParticipants.indexOf(forcedWinner);\n                    if (finalWinner >= 0) {\n                        setSelected(finalWinner);\n                    }\n                }\n                winnerTimeout.current = setTimeout(function () {\n                    onChangeView(nextView);\n                }, 500);\n            }, pickingWinnerDuration);\n\n            shuffleInterval.current = setInterval(function () {\n                const randomParticipant = Math.floor(Math.random() * shuffledParticipants.length);\n                setSelected(randomParticipant);\n            }, 150);\n        }\n\n        return () => {\n            clearTimeout(randomTimeout.current);\n            clearTimeout(winnerTimeout.current);\n            clearInterval(shuffleInterval.current);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (winnerName) {\n            debouncedOnSelectWinner(winnerName);\n        }\n    }, [winnerName, debouncedOnSelectWinner]);\n\n    return (\n        <Container>\n            <Title>\n                <ImgSVG\n                    width=\"3rem\"\n                    src={shuffleSpinner}\n                    padding=\"0 1rem\"\n                />\n                {Config.text.pickingWinnerTitle}\n                <ImgSVG\n                    width=\"3rem\"\n                    src={shuffleSpinner}\n                    padding=\"0 1rem\"\n                />\n            </Title>\n            <P textAlign=\"center\">{winnerName}</P>\n            <Row>\n                <Button\n                    secondary\n                    onClick={() => onChangeView(previousView)}\n                >\n                    {Config.text.cancelButton}\n                </Button>\n                <Button\n                    primary\n                    onClick={() => onChangeView(nextView)}\n                >\n                    {Config.text.finishButton}\n                </Button>\n            </Row>\n        </Container>\n    );\n};\n\nShuffle.propTypes = {\n    getRandomTimeout: PropTypes.func,\n    forcedWinner: PropTypes.string,\n    onChangeView: PropTypes.func.isRequired,\n    nextView: PropTypes.string,\n};\n\nShuffle.defaultProps = {\n    forcedWinner: null,\n    previousView: 'setParticipants',\n    nextView: 'winner',\n};\n\nexport default Shuffle;\n","export const getRandomTimeout = () => Math.floor(Math.random() * 10) + 5;\n","import styled from 'styled-components';\n\nexport const Podium = styled.div`\n  z-index: 3;\n  position: relative;\n  text-align: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Confetti from 'react-confetti';\nimport Button from 'components/button';\nimport { SuperTitle, Headline, Title } from 'components/typography';\nimport AppLogo from 'components/app-logo';\nimport { clearStorage } from 'utils/localstorage';\nimport { Podium } from './styles';\nimport Config from 'config';\nimport { useAppContext } from '../../App/context';\n\nconst Winner = ({ nextView }) => {\n    const { selectedWinner, onClearState, onChangeView } = useAppContext();\n\n    const handleStartOver = () => {\n        onChangeView(nextView);\n    };\n\n    const handleFinish = () => {\n        clearStorage();\n        onClearState(handleStartOver);\n    };\n\n    return (\n        <>\n            <AppLogo small />\n            <Podium>\n                <Title>{Config.text.congratulationsTitle}</Title>\n                <Headline>{selectedWinner}</Headline>\n                <SuperTitle>{Config.text.congratulationsSuperTitle}</SuperTitle>\n                <Button\n                    primary\n                    onClick={handleFinish}\n                >\n                    {Config.text.startOverButton}\n                </Button>\n            </Podium>\n            <Confetti\n                width={window.innerWidth}\n                height={window.innerHeight}\n            />\n        </>\n    );\n};\n\nWinner.propTypes = {\n    previousView: PropTypes.string,\n    nextView: PropTypes.string,\n    selectedWinner: PropTypes.string.isRequired,\n};\n\nWinner.defaultProps = {\n    previousView: 'shuffle',\n    nextView: 'intro',\n};\n\nexport default Winner;\n","import Intro from './intro';\nimport SetParticipants from './set-participants';\nimport ConfirmParticipants from './confirm-participants';\nimport Shuffle from './shuffle';\nimport Winner from './winner';\n\nexport const VIEWS = {\n    intro: Intro,\n    setParticipants: SetParticipants,\n    confirmParticipants: ConfirmParticipants,\n    shuffle: Shuffle,\n    winner: Winner,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { VIEWS } from 'views';\nimport { useAppContext } from './context';\n\nconst ActiveContainer = () => {\n    const { activeView } = useAppContext();\n    const Comp = VIEWS[activeView];\n    return <Comp />;\n};\n\nActiveContainer.propTypes = {\n    activeView: PropTypes.string,\n};\n\nActiveContainer.defaultProps = {\n    activeView: 'intro',\n};\n\nexport default ActiveContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { AppContextProvider } from './context.js';\nimport AppWrapper from 'components/app-wrapper';\nimport { Main } from 'components/layout';\nimport ActiveContainer from './ActiveContainer.js';\n\nexport default function App() {\n    return (\n        <AppContextProvider>\n            <AppWrapper>\n                <Main>\n                    <ActiveContainer />\n                </Main>\n            </AppWrapper>\n        </AppContextProvider>\n    );\n}\n","module.exports = __webpack_public_path__ + \"static/media/shuffle-spinner.9c057550.svg\";"],"sourceRoot":""}